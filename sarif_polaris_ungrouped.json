{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"","rules":[{"id":"BDSA-2018-2898","shortDescription":{"text":"[T] Dependency: dom4j: flexible XML framework for Java 1.6.1 thru   (BDSA-2018-2898)"},"fullDescription":{"text":"dom4j contains an XML injection vulnerability that allows a remote attacker to modify XML content.  This can affect application using the framework that pass user-supplied data directly into `addElement` of `addAttribute` calls."},"help":{"markdown":"# BDSA-2018-2898\n## Upgrade Guidance\n\n**Short Term** - \n\n**Long Term** - \n\n## Description\ndom4j contains an XML injection vulnerability that allows a remote attacker to modify XML content.  This can affect application using the framework that pass user-supplied data directly into `addElement` of `addAttribute` calls.\n\n## CVE/BDSA info\n\n\n### BDSA: [L] [BDSA-2018-2898](https://nvd.nist.gov/vuln/detail/BDSA-2018-2898)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-91](https://cwe.mitre.org/data/definitions/91.html\n\n","text":"dom4j contains an XML injection vulnerability that allows a remote attacker to modify XML content.  This can affect application using the framework that pass user-supplied data directly into `addElement` of `addAttribute` calls."},"properties":{"security-severity":"3.8","tags":["security","patch_available","open_source_analysis","transitive_dependency","external/cwe/cwe-91"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2019-4386","shortDescription":{"text":"[T] Dependency: dom4j: flexible XML framework for Java 1.6.1 thru   (BDSA-2019-4386)"},"fullDescription":{"text":"Dom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system."},"help":{"markdown":"# BDSA-2019-4386\n## Upgrade Guidance\n\n**Short Term** - \n\n**Long Term** - \n\n## Description\nDom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2019-4386](https://nvd.nist.gov/vuln/detail/BDSA-2019-4386)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-611](https://cwe.mitre.org/data/definitions/611.html\n\n","text":"Dom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","transitive_dependency","external/cwe/cwe-611"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2016-0002","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2016-0002)"},"fullDescription":{"text":"Spring Framework is vulnerable to path traversal. Paths provided to the `Resourceservlet` were not properly sanitized and as a result exposed to directory traversal attacks. `ResourceServlet` is now deprecated and `ResourceHttpRequestHandler` (and related classes) have superseded it."},"help":{"markdown":"# BDSA-2016-0002\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSpring Framework is vulnerable to path traversal. Paths provided to the `Resourceservlet` were not properly sanitized and as a result exposed to directory traversal attacks. `ResourceServlet` is now deprecated and `ResourceHttpRequestHandler` (and related classes) have superseded it.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2016-0002](https://nvd.nist.gov/vuln/detail/BDSA-2016-0002)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html\n\n","text":"Spring Framework is vulnerable to path traversal. Paths provided to the `Resourceservlet` were not properly sanitized and as a result exposed to directory traversal attacks. `ResourceServlet` is now deprecated and `ResourceHttpRequestHandler` (and related classes) have superseded it."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-23"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2016-1577","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2016-1577)"},"fullDescription":{"text":"The Spring Framework contains a flaw when handling URL pattern mappings. The component fails to maintain the intended authorization for mapping requests to controllers. This could allow a remote attacker to bypass authentication and read protected files."},"help":{"markdown":"# BDSA-2016-1577\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nThe Spring Framework contains a flaw when handling URL pattern mappings. The component fails to maintain the intended authorization for mapping requests to controllers. This could allow a remote attacker to bypass authentication and read protected files.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2016-1577](https://nvd.nist.gov/vuln/detail/BDSA-2016-1577)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-41](https://cwe.mitre.org/data/definitions/41.html\n\n","text":"The Spring Framework contains a flaw when handling URL pattern mappings. The component fails to maintain the intended authorization for mapping requests to controllers. This could allow a remote attacker to bypass authentication and read protected files."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-41"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2016-1700","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2016-1700)"},"fullDescription":{"text":"Pivotal's Spring Framework contains an unsafe Java deserialization vulnerability. If the Spring Framework library's `HttpInvokerServiceExporter` is being used to deserialize client data, it may be possible for a remote attacker to perform remote code execution (RCE) on systems using Spring Framework.\n\n**Note:** All versions prior to **6.0.0-M1** (Which is a pre-release) contain the functionality that may lead to deserialization attacks depending on how the library is implemented in the product."},"help":{"markdown":"# BDSA-2016-1700\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nPivotal's Spring Framework contains an unsafe Java deserialization vulnerability. If the Spring Framework library's `HttpInvokerServiceExporter` is being used to deserialize client data, it may be possible for a remote attacker to perform remote code execution (RCE) on systems using Spring Framework.\n\n**Note:** All versions prior to **6.0.0-M1** (Which is a pre-release) contain the functionality that may lead to deserialization attacks depending on how the library is implemented in the product.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2016-1700](https://nvd.nist.gov/vuln/detail/BDSA-2016-1700)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Pivotal's Spring Framework contains an unsafe Java deserialization vulnerability. If the Spring Framework library's `HttpInvokerServiceExporter` is being used to deserialize client data, it may be possible for a remote attacker to perform remote code execution (RCE) on systems using Spring Framework.\n\n**Note:** All versions prior to **6.0.0-M1** (Which is a pre-release) contain the functionality that may lead to deserialization attacks depending on how the library is implemented in the product."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2018-0994","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2018-0994)"},"fullDescription":{"text":"Spring Framework is vulnerable to remote code execution (RCE) due to lack of proper validation of user-supplied input. Potential attackers can leverage this flaw to run arbitrary code on the target system by sending crafted messages."},"help":{"markdown":"# BDSA-2018-0994\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSpring Framework is vulnerable to remote code execution (RCE) due to lack of proper validation of user-supplied input. Potential attackers can leverage this flaw to run arbitrary code on the target system by sending crafted messages.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2018-0994](https://nvd.nist.gov/vuln/detail/BDSA-2018-0994)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Spring Framework is vulnerable to remote code execution (RCE) due to lack of proper validation of user-supplied input. Potential attackers can leverage this flaw to run arbitrary code on the target system by sending crafted messages."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2018-1013","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2018-1013)"},"fullDescription":{"text":"Spring Framework is vulnerable to directory traversal due to the way static content can be loaded. Potential attackers could leverage this flaw to gain unauthorized access to sensitive files on Windows hosts."},"help":{"markdown":"# BDSA-2018-1013\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSpring Framework is vulnerable to directory traversal due to the way static content can be loaded. Potential attackers could leverage this flaw to gain unauthorized access to sensitive files on Windows hosts.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2018-1013](https://nvd.nist.gov/vuln/detail/BDSA-2018-1013)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html\n\n","text":"Spring Framework is vulnerable to directory traversal due to the way static content can be loaded. Potential attackers could leverage this flaw to gain unauthorized access to sensitive files on Windows hosts."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-23"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2018-1016","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2018-1016)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to insufficient validation of user-supplied input. Crafted input from a remote client can be used to exploit a flaw in the way that servers running the affected software communicate with each other. This is because communication between the servers uses that user-supplied input for building requests."},"help":{"markdown":"# BDSA-2018-1016\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to insufficient validation of user-supplied input. Crafted input from a remote client can be used to exploit a flaw in the way that servers running the affected software communicate with each other. This is because communication between the servers uses that user-supplied input for building requests.\n\n## CVE/BDSA info\n\n\n### BDSA: [L] [BDSA-2018-1016](https://nvd.nist.gov/vuln/detail/BDSA-2018-1016)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Spring Framework is vulnerable to privilege escalation due to insufficient validation of user-supplied input. Crafted input from a remote client can be used to exploit a flaw in the way that servers running the affected software communicate with each other. This is because communication between the servers uses that user-supplied input for building requests."},"properties":{"security-severity":"3.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2018-1042","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2018-1042)"},"fullDescription":{"text":"Spring Framework is vulnerable to remote code execution (RCE) due to lack of proper validation of user-supplied input. Potential attackers can leverage this flaw to run arbitrary code on the target system by sending crafted messages. Original remediation was not implemented correctly for the 4.3.x branch."},"help":{"markdown":"# BDSA-2018-1042\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSpring Framework is vulnerable to remote code execution (RCE) due to lack of proper validation of user-supplied input. Potential attackers can leverage this flaw to run arbitrary code on the target system by sending crafted messages. Original remediation was not implemented correctly for the 4.3.x branch.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2018-1042](https://nvd.nist.gov/vuln/detail/BDSA-2018-1042)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Spring Framework is vulnerable to remote code execution (RCE) due to lack of proper validation of user-supplied input. Potential attackers can leverage this flaw to run arbitrary code on the target system by sending crafted messages. Original remediation was not implemented correctly for the 4.3.x branch."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2018-1440","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2018-1440)"},"fullDescription":{"text":"Spring Framework has a flaw in the manipulation of regular expressions within the spring-messaging module. An attacker can send a specially crafted message to the simple STOMP broker that will trigger a regular expression denial-of-service (ReDoS)."},"help":{"markdown":"# BDSA-2018-1440\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSpring Framework has a flaw in the manipulation of regular expressions within the spring-messaging module. An attacker can send a specially crafted message to the simple STOMP broker that will trigger a regular expression denial-of-service (ReDoS).\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2018-1440](https://nvd.nist.gov/vuln/detail/BDSA-2018-1440)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Spring Framework has a flaw in the manipulation of regular expressions within the spring-messaging module. An attacker can send a specially crafted message to the simple STOMP broker that will trigger a regular expression denial-of-service (ReDoS)."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2018-1901","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2018-1901)"},"fullDescription":{"text":"Spring Framework is vulnerable to information exposure due to improper configuration of JSON with Padding (JSONP). This could allow an attacker to obtain potentially sensitive information."},"help":{"markdown":"# BDSA-2018-1901\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSpring Framework is vulnerable to information exposure due to improper configuration of JSON with Padding (JSONP). This could allow an attacker to obtain potentially sensitive information.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2018-1901](https://nvd.nist.gov/vuln/detail/BDSA-2018-1901)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html\n\n","text":"Spring Framework is vulnerable to information exposure due to improper configuration of JSON with Padding (JSONP). This could allow an attacker to obtain potentially sensitive information."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-200"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2018-1960","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2018-1960)"},"fullDescription":{"text":"A cross-site tracing (*XST*) vulnerability has been discovered in spring framework. The application allows obscure request methods, such as TRACE and TRACK. These HTTP methods can be used with an existing cross-site scripting (*XSS*) vulnerability to escalate to an XST vulnerability. An attacker could exploit this by utilizing an XSS vulnerability to bypass cookie protection and steal sensitive data."},"help":{"markdown":"# BDSA-2018-1960\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nA cross-site tracing (*XST*) vulnerability has been discovered in spring framework. The application allows obscure request methods, such as TRACE and TRACK. These HTTP methods can be used with an existing cross-site scripting (*XSS*) vulnerability to escalate to an XST vulnerability. An attacker could exploit this by utilizing an XSS vulnerability to bypass cookie protection and steal sensitive data.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2018-1960](https://nvd.nist.gov/vuln/detail/BDSA-2018-1960)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-650](https://cwe.mitre.org/data/definitions/650.html\n\n","text":"A cross-site tracing (*XST*) vulnerability has been discovered in spring framework. The application allows obscure request methods, such as TRACE and TRACK. These HTTP methods can be used with an existing cross-site scripting (*XSS*) vulnerability to escalate to an XST vulnerability. An attacker could exploit this by utilizing an XSS vulnerability to bypass cookie protection and steal sensitive data."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-650"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2018-3577","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2018-3577)"},"fullDescription":{"text":"An improper input validation vulnerability has been discovered in Spring Framework by Pivotal. A range header input is not being correctly restricted allowing a high value to be accepted by the application. An attacker could exploit this vulnerability to cause a denial-of-service (DoS) condition. \n\nThis vulnerability affects applications that depend on either `spring-webmvc` or `spring-webflux`."},"help":{"markdown":"# BDSA-2018-3577\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nAn improper input validation vulnerability has been discovered in Spring Framework by Pivotal. A range header input is not being correctly restricted allowing a high value to be accepted by the application. An attacker could exploit this vulnerability to cause a denial-of-service (DoS) condition. \n\nThis vulnerability affects applications that depend on either `spring-webmvc` or `spring-webflux`.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2018-3577](https://nvd.nist.gov/vuln/detail/BDSA-2018-3577)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-118](https://cwe.mitre.org/data/definitions/118.html\n\n","text":"An improper input validation vulnerability has been discovered in Spring Framework by Pivotal. A range header input is not being correctly restricted allowing a high value to be accepted by the application. An attacker could exploit this vulnerability to cause a denial-of-service (DoS) condition. \n\nThis vulnerability affects applications that depend on either `spring-webmvc` or `spring-webflux`."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-118"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2020-2431","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"# BDSA-2020-2431\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2020-2431](https://nvd.nist.gov/vuln/detail/BDSA-2020-2431)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3236","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"# BDSA-2021-3236\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-3236](https://nvd.nist.gov/vuln/detail/BDSA-2021-3236)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2022-0011","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"# BDSA-2022-0011\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2022-0011](https://nvd.nist.gov/vuln/detail/BDSA-2022-0011)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2022-0820","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"# BDSA-2022-0820\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2022-0820](https://nvd.nist.gov/vuln/detail/BDSA-2022-0820)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2022-0847","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"# BDSA-2022-0847\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2022-0847](https://nvd.nist.gov/vuln/detail/BDSA-2022-0847)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0858","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"# BDSA-2022-0858\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## CVE/BDSA info\n\n\n### BDSA: [C] [BDSA-2022-0858](https://nvd.nist.gov/vuln/detail/BDSA-2022-0858)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-184"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-1040","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"# BDSA-2022-1040\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## CVE/BDSA info\n\n\n### BDSA: [L] [BDSA-2022-1040](https://nvd.nist.gov/vuln/detail/BDSA-2022-1040)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2023-0638","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"# BDSA-2023-0638\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2023-0638](https://nvd.nist.gov/vuln/detail/BDSA-2023-0638)\n\n\n\n## Reference\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2023-0847","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"# BDSA-2023-0847\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2023-0847](https://nvd.nist.gov/vuln/detail/BDSA-2023-0847)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (CVE-2022-22970)"},"fullDescription":{"text":"In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, applications that handle file uploads are vulnerable to DoS attack if they rely on data binding to set a MultipartFile or javax.servlet.Part to a field in a model object."},"help":{"markdown":"# CVE-2022-22970\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nIn spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, applications that handle file uploads are vulnerable to DoS attack if they rely on data binding to set a MultipartFile or javax.servlet.Part to a field in a model object.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html\n\n","text":"In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, applications that handle file uploads are vulnerable to DoS attack if they rely on data binding to set a MultipartFile or javax.servlet.Part to a field in a model object."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971","shortDescription":{"text":"[D] Dependency: Spring Framework 4.2.3.RELEASE (CVE-2022-22971)"},"fullDescription":{"text":"In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, application with a STOMP over WebSocket endpoint is vulnerable to a denial of service attack by an authenticated user."},"help":{"markdown":"# CVE-2022-22971\n## Upgrade Guidance\n\n**Short Term** - 4.2.5.RELEASE\n\n**Long Term** - 6.0.9\n\n## Description\nIn spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, application with a STOMP over WebSocket endpoint is vulnerable to a denial of service attack by an authenticated user.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html\n\n","text":"In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, application with a STOMP over WebSocket endpoint is vulnerable to a denial of service attack by an authenticated user."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2019-4008","shortDescription":{"text":"[D] Dependency: Apache Log4j 1.2.17 (BDSA-2019-4008)"},"fullDescription":{"text":"Apache Log4j is vulnerable to remote code execution (RCE).  This allows a remote attacker to send a crafted serialized payload that, when processed by Log4j, will execute arbitrary code. This can occur if Log4j is deserializing untrusted network traffic."},"help":{"markdown":"# BDSA-2019-4008\n## Upgrade Guidance\n\n**Short Term** - 1.2.17.norce\n\n**Long Term** - 1.2.17.norce\n\n## Description\nApache Log4j is vulnerable to remote code execution (RCE).  This allows a remote attacker to send a crafted serialized payload that, when processed by Log4j, will execute arbitrary code. This can occur if Log4j is deserializing untrusted network traffic.\n\n## CVE/BDSA info\n\n\n### BDSA: [C] [BDSA-2019-4008](https://nvd.nist.gov/vuln/detail/BDSA-2019-4008)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Apache Log4j is vulnerable to remote code execution (RCE).  This allows a remote attacker to send a crafted serialized payload that, when processed by Log4j, will execute arbitrary code. This can occur if Log4j is deserializing untrusted network traffic."},"properties":{"security-severity":"9.1","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2020-1398","shortDescription":{"text":"[D] Dependency: Apache Log4j 1.2.17 (BDSA-2020-1398)"},"fullDescription":{"text":"Apache Log4j is vulnerable to man-in-the-middle (MITM) attacks due to improper SSL certificate validation due to host name mismatch. An attacker could exploit this by mounting a man-in-the-middle attack which could leak log messages sent through SMTPS."},"help":{"markdown":"# BDSA-2020-1398\n## Upgrade Guidance\n\n**Short Term** - 1.2.17.norce\n\n**Long Term** - 1.2.17.norce\n\n## Description\nApache Log4j is vulnerable to man-in-the-middle (MITM) attacks due to improper SSL certificate validation due to host name mismatch. An attacker could exploit this by mounting a man-in-the-middle attack which could leak log messages sent through SMTPS.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2020-1398](https://nvd.nist.gov/vuln/detail/BDSA-2020-1398)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-297](https://cwe.mitre.org/data/definitions/297.html\n\n","text":"Apache Log4j is vulnerable to man-in-the-middle (MITM) attacks due to improper SSL certificate validation due to host name mismatch. An attacker could exploit this by mounting a man-in-the-middle attack which could leak log messages sent through SMTPS."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-297"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3764","shortDescription":{"text":"[D] Dependency: Apache Log4j 1.2.17 (BDSA-2021-3764)"},"fullDescription":{"text":"Log4j **1.x** versions are vulnerable to deserializing untrusted data if configured to use `JMSAppender` (which is not the default). A remote attacker could leverage this to execute arbitrary code on the underlying system with the privileges of the application that is running Log4j.\n\n**Note** that Log4j **1.x** has been marked EOL for many years and has not received updates in this time."},"help":{"markdown":"# BDSA-2021-3764\n## Upgrade Guidance\n\n**Short Term** - 1.2.17.norce\n\n**Long Term** - 1.2.17.norce\n\n## Description\nLog4j **1.x** versions are vulnerable to deserializing untrusted data if configured to use `JMSAppender` (which is not the default). A remote attacker could leverage this to execute arbitrary code on the underlying system with the privileges of the application that is running Log4j.\n\n**Note** that Log4j **1.x** has been marked EOL for many years and has not received updates in this time.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2021-3764](https://nvd.nist.gov/vuln/detail/BDSA-2021-3764)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Log4j **1.x** versions are vulnerable to deserializing untrusted data if configured to use `JMSAppender` (which is not the default). A remote attacker could leverage this to execute arbitrary code on the underlying system with the privileges of the application that is running Log4j.\n\n**Note** that Log4j **1.x** has been marked EOL for many years and has not received updates in this time."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-4371","shortDescription":{"text":"[D] Dependency: Apache Log4j 1.2.17 (BDSA-2021-4371)"},"fullDescription":{"text":"Apache chainsaw is vulnerable to a deserialization of untrusted data flaw. A remote attacker could leverage this to cause remote code execution (RCE)."},"help":{"markdown":"# BDSA-2021-4371\n## Upgrade Guidance\n\n**Short Term** - 1.2.17.norce\n\n**Long Term** - 1.2.17.norce\n\n## Description\nApache chainsaw is vulnerable to a deserialization of untrusted data flaw. A remote attacker could leverage this to cause remote code execution (RCE).\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2021-4371](https://nvd.nist.gov/vuln/detail/BDSA-2021-4371)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Apache chainsaw is vulnerable to a deserialization of untrusted data flaw. A remote attacker could leverage this to cause remote code execution (RCE)."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0117","shortDescription":{"text":"[D] Dependency: Apache Log4j 1.2.17 (BDSA-2022-0117)"},"fullDescription":{"text":"Log4j is vulnerable to remote code execution (RCE) due to the deserialization of untrusted data. An attacker that is able to make the JMSSink component submit requests to a given LDAP server could load malicious Java classes into the vulnerable application's memory by leveraging the JNDI class-loading capability.\n\nIn order to exploit this vulnerability, the attacker must be able to control the configuration of Log4j, or must have access to an LDAP server which the JMSSink component is configured to use. Log4j must also be configured to utilize JMSSink, which is not used by default."},"help":{"markdown":"# BDSA-2022-0117\n## Upgrade Guidance\n\n**Short Term** - 1.2.17.norce\n\n**Long Term** - 1.2.17.norce\n\n## Description\nLog4j is vulnerable to remote code execution (RCE) due to the deserialization of untrusted data. An attacker that is able to make the JMSSink component submit requests to a given LDAP server could load malicious Java classes into the vulnerable application's memory by leveraging the JNDI class-loading capability.\n\nIn order to exploit this vulnerability, the attacker must be able to control the configuration of Log4j, or must have access to an LDAP server which the JMSSink component is configured to use. Log4j must also be configured to utilize JMSSink, which is not used by default.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2022-0117](https://nvd.nist.gov/vuln/detail/BDSA-2022-0117)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Log4j is vulnerable to remote code execution (RCE) due to the deserialization of untrusted data. An attacker that is able to make the JMSSink component submit requests to a given LDAP server could load malicious Java classes into the vulnerable application's memory by leveraging the JNDI class-loading capability.\n\nIn order to exploit this vulnerability, the attacker must be able to control the configuration of Log4j, or must have access to an LDAP server which the JMSSink component is configured to use. Log4j must also be configured to utilize JMSSink, which is not used by default."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0118","shortDescription":{"text":"[D] Dependency: Apache Log4j 1.2.17 (BDSA-2022-0118)"},"fullDescription":{"text":"Apache Log4j is vulnerable to a remote code execution (RCE) issue due to how the Apache Chainsaw component can unsafely deserialize user controlled input.\n\nAn attacker could send crafted input to the application in order to abuse the flaw and execute malicious code on the system.\n\n**Note**: The Apache Chainsaw deserialization vulnerability has been reported as **CVE-2020-9493** and affects EOL Apache Log4j **1.2.x** versions that include this component."},"help":{"markdown":"# BDSA-2022-0118\n## Upgrade Guidance\n\n**Short Term** - 1.2.17.norce\n\n**Long Term** - 1.2.17.norce\n\n## Description\nApache Log4j is vulnerable to a remote code execution (RCE) issue due to how the Apache Chainsaw component can unsafely deserialize user controlled input.\n\nAn attacker could send crafted input to the application in order to abuse the flaw and execute malicious code on the system.\n\n**Note**: The Apache Chainsaw deserialization vulnerability has been reported as **CVE-2020-9493** and affects EOL Apache Log4j **1.2.x** versions that include this component.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2022-0118](https://nvd.nist.gov/vuln/detail/BDSA-2022-0118)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"Apache Log4j is vulnerable to a remote code execution (RCE) issue due to how the Apache Chainsaw component can unsafely deserialize user controlled input.\n\nAn attacker could send crafted input to the application in order to abuse the flaw and execute malicious code on the system.\n\n**Note**: The Apache Chainsaw deserialization vulnerability has been reported as **CVE-2020-9493** and affects EOL Apache Log4j **1.2.x** versions that include this component."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0119","shortDescription":{"text":"[D] Dependency: Apache Log4j 1.2.17 (BDSA-2022-0119)"},"fullDescription":{"text":"Apache Log4j **1.2.x** versions are vulnerable to SQL injection (SQLi). This may allow an attacker to insert SQL queries into messages being logged that will get executed against a backend database. \n\n**Note:** This issue  affects versions **1.2.x** that are configured to use the `JDBCAppender`. The vendor states that Log4j 1 is no longer maintained and this issue will not be fixed."},"help":{"markdown":"# BDSA-2022-0119\n## Upgrade Guidance\n\n**Short Term** - 1.2.17.norce\n\n**Long Term** - 1.2.17.norce\n\n## Description\nApache Log4j **1.2.x** versions are vulnerable to SQL injection (SQLi). This may allow an attacker to insert SQL queries into messages being logged that will get executed against a backend database. \n\n**Note:** This issue  affects versions **1.2.x** that are configured to use the `JDBCAppender`. The vendor states that Log4j 1 is no longer maintained and this issue will not be fixed.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2022-0119](https://nvd.nist.gov/vuln/detail/BDSA-2022-0119)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html\n\n","text":"Apache Log4j **1.2.x** versions are vulnerable to SQL injection (SQLi). This may allow an attacker to insert SQL queries into messages being logged that will get executed against a backend database. \n\n**Note:** This issue  affects versions **1.2.x** that are configured to use the `JDBCAppender`. The vendor states that Log4j 1 is no longer maintained and this issue will not be fixed."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-89"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-26464","shortDescription":{"text":"[D] Dependency: Apache Log4j 1.2.17 (CVE-2023-26464)"},"fullDescription":{"text":"** UNSUPPORTED WHEN ASSIGNED **\n\nWhen using the Chainsaw or SocketAppender components with Log4j 1.x on JRE less than 1.7, an attacker that manages to cause a logging entry involving a specially-crafted (ie, deeply nested) \nhashmap or hashtable (depending on which logging component is in use) to be processed could exhaust the available memory in the virtual machine and achieve Denial of Service when the object is deserialized.\n\nThis issue affects Apache Log4j before 2. Affected users are recommended to update to Log4j 2.x.\n\nNOTE: This vulnerability only affects products that are no longer supported by the maintainer.\n\n\n\n\n"},"help":{"markdown":"# CVE-2023-26464\n## Upgrade Guidance\n\n**Short Term** - 1.2.17.norce\n\n**Long Term** - 1.2.17.norce\n\n## Description\n** UNSUPPORTED WHEN ASSIGNED **\n\nWhen using the Chainsaw or SocketAppender components with Log4j 1.x on JRE less than 1.7, an attacker that manages to cause a logging entry involving a specially-crafted (ie, deeply nested) \nhashmap or hashtable (depending on which logging component is in use) to be processed could exhaust the available memory in the virtual machine and achieve Denial of Service when the object is deserialized.\n\nThis issue affects Apache Log4j before 2. Affected users are recommended to update to Log4j 2.x.\n\nNOTE: This vulnerability only affects products that are no longer supported by the maintainer.\n\n\n\n\n\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [CVE-2023-26464](https://nvd.nist.gov/vuln/detail/CVE-2023-26464)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html\n\n","text":"** UNSUPPORTED WHEN ASSIGNED **\n\nWhen using the Chainsaw or SocketAppender components with Log4j 1.x on JRE less than 1.7, an attacker that manages to cause a logging entry involving a specially-crafted (ie, deeply nested) \nhashmap or hashtable (depending on which logging component is in use) to be processed could exhaust the available memory in the virtual machine and achieve Denial of Service when the object is deserialized.\n\nThis issue affects Apache Log4j before 2. Affected users are recommended to update to Log4j 2.x.\n\nNOTE: This vulnerability only affects products that are no longer supported by the maintainer.\n\n\n\n\n"},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2016-1603","shortDescription":{"text":"[D] Dependency: Spring Security 4.0.3.RELEASE (BDSA-2016-1603)"},"fullDescription":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"help":{"markdown":"# BDSA-2016-1603\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.0\n\n## Description\nSpring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2016-1603](https://nvd.nist.gov/vuln/detail/BDSA-2016-1603)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html\n\n","text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2019-1853","shortDescription":{"text":"[D] Dependency: Spring Security 4.0.3.RELEASE (BDSA-2019-1853)"},"fullDescription":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"help":{"markdown":"# BDSA-2019-1853\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.0\n\n## Description\nSpring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2019-1853](https://nvd.nist.gov/vuln/detail/BDSA-2019-1853)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html\n\n","text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-0417","shortDescription":{"text":"[D] Dependency: Spring Security 4.0.3.RELEASE (BDSA-2021-0417)"},"fullDescription":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"help":{"markdown":"# BDSA-2021-0417\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.0\n\n## Description\nSpring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-0417](https://nvd.nist.gov/vuln/detail/BDSA-2021-0417)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-265](https://cwe.mitre.org/data/definitions/265.html\n\n","text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-265"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-2310","shortDescription":{"text":"[D] Dependency: Spring Security 4.0.3.RELEASE (BDSA-2021-2310)"},"fullDescription":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"help":{"markdown":"# BDSA-2021-2310\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.0\n\n## Description\nSpring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-2310](https://nvd.nist.gov/vuln/detail/BDSA-2021-2310)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2022-1369","shortDescription":{"text":"[D] Dependency: Spring Security 4.0.3.RELEASE (BDSA-2022-1369)"},"fullDescription":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"help":{"markdown":"# BDSA-2022-1369\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.0\n\n## Description\nSpring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2022-1369](https://nvd.nist.gov/vuln/detail/BDSA-2022-1369)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html\n\n","text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-185"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-1370","shortDescription":{"text":"[D] Dependency: Spring Security 4.0.3.RELEASE (BDSA-2022-1370)"},"fullDescription":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"help":{"markdown":"# BDSA-2022-1370\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.0\n\n## Description\nSpring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2022-1370](https://nvd.nist.gov/vuln/detail/BDSA-2022-1370)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html\n\n","text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-190"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2022-3109","shortDescription":{"text":"[D] Dependency: Spring Security 4.0.3.RELEASE (BDSA-2022-3109)"},"fullDescription":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"help":{"markdown":"# BDSA-2022-3109\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.0\n\n## Description\nSpring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2022-3109](https://nvd.nist.gov/vuln/detail/BDSA-2022-3109)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-285](https://cwe.mitre.org/data/definitions/285.html\n\n","text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-285"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5408","shortDescription":{"text":"[D] Dependency: Spring Security 4.0.3.RELEASE (CVE-2020-5408)"},"fullDescription":{"text":"Spring Security versions 5.3.x prior to 5.3.2, 5.2.x prior to 5.2.4, 5.1.x prior to 5.1.10, 5.0.x prior to 5.0.16 and 4.2.x prior to 4.2.16 use a fixed null initialization vector with CBC Mode in the implementation of the queryable text encryptor. A malicious user with access to the data that has been encrypted using such an encryptor may be able to derive the unencrypted values using a dictionary attack."},"help":{"markdown":"# CVE-2020-5408\n## Upgrade Guidance\n\n**Short Term** - 4.2.20\n\n**Long Term** - 6.1.0\n\n## Description\nSpring Security versions 5.3.x prior to 5.3.2, 5.2.x prior to 5.2.4, 5.1.x prior to 5.1.10, 5.0.x prior to 5.0.16 and 4.2.x prior to 4.2.16 use a fixed null initialization vector with CBC Mode in the implementation of the queryable text encryptor. A malicious user with access to the data that has been encrypted using such an encryptor may be able to derive the unencrypted values using a dictionary attack.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [CVE-2020-5408](https://nvd.nist.gov/vuln/detail/CVE-2020-5408)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-330](https://cwe.mitre.org/data/definitions/330.html\n\n","text":"Spring Security versions 5.3.x prior to 5.3.2, 5.2.x prior to 5.2.4, 5.1.x prior to 5.1.10, 5.0.x prior to 5.0.16 and 4.2.x prior to 4.2.16 use a fixed null initialization vector with CBC Mode in the implementation of the queryable text encryptor. A malicious user with access to the data that has been encrypted using such an encryptor may be able to derive the unencrypted values using a dictionary attack."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-330"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2018-1358","shortDescription":{"text":"[T] Dependency: google-guava 15.0 thru   (BDSA-2018-1358)"},"fullDescription":{"text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"help":{"markdown":"# BDSA-2018-1358\n## Upgrade Guidance\n\n**Short Term** - \n\n**Long Term** - \n\n## Description\nServers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2018-1358](https://nvd.nist.gov/vuln/detail/BDSA-2018-1358)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html\n\n","text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","transitive_dependency","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2020-3736","shortDescription":{"text":"[T] Dependency: google-guava 15.0 thru   (BDSA-2020-3736)"},"fullDescription":{"text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"help":{"markdown":"# BDSA-2020-3736\n## Upgrade Guidance\n\n**Short Term** - \n\n**Long Term** - \n\n## Description\nGuava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2020-3736](https://nvd.nist.gov/vuln/detail/BDSA-2020-3736)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html\n\n","text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","transitive_dependency","external/cwe/cwe-200"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2023-0357","shortDescription":{"text":"[D] Dependency: Apache Commons FileUpload 1.3.3 (BDSA-2023-0357)"},"fullDescription":{"text":"Apache Commons FileUpload does not sufficiently limit the the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS)."},"help":{"markdown":"# BDSA-2023-0357\n## Upgrade Guidance\n\n**Short Term** - 1.5\n\n**Long Term** - 1.5\n\n## Description\nApache Commons FileUpload does not sufficiently limit the the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS).\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2023-0357](https://nvd.nist.gov/vuln/detail/BDSA-2023-0357)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html\n\n","text":"Apache Commons FileUpload does not sufficiently limit the the number of request parts that can be received via user input. An attacker can exploit this flaw by supplying a malicious upload or series of uploads and cause excessive resource allocation. This can trigger a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2019-4479","shortDescription":{"text":"[D] Dependency: Hibernate ORM 5.3.0 (BDSA-2019-4479)"},"fullDescription":{"text":"Hibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands."},"help":{"markdown":"# BDSA-2019-4479\n## Upgrade Guidance\n\n**Short Term** - 5.6.15.Final\n\n**Long Term** - 6.2.2.Final\n\n## Description\nHibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2019-4479](https://nvd.nist.gov/vuln/detail/BDSA-2019-4479)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html\n\n","text":"Hibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-89"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2020-3410","shortDescription":{"text":"[D] Dependency: Hibernate ORM 5.3.0 (BDSA-2020-3410)"},"fullDescription":{"text":"Hibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected."},"help":{"markdown":"# BDSA-2020-3410\n## Upgrade Guidance\n\n**Short Term** - 5.6.15.Final\n\n**Long Term** - 6.2.2.Final\n\n## Description\nHibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [BDSA-2020-3410](https://nvd.nist.gov/vuln/detail/BDSA-2020-3410)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html\n\n","text":"Hibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-89"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-13692","shortDescription":{"text":"[D] Dependency: PostgreSQL JDBC Driver (pgjdbc) 9.2-1004-jdbc4 (CVE-2020-13692)"},"fullDescription":{"text":"PostgreSQL JDBC Driver (aka PgJDBC) before 42.2.13 allows XXE."},"help":{"markdown":"# CVE-2020-13692\n## Upgrade Guidance\n\n**Short Term** - 9.4-1206-jdbc42\n\n**Long Term** - 42.6.0\n\n## Description\nPostgreSQL JDBC Driver (aka PgJDBC) before 42.2.13 allows XXE.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [CVE-2020-13692](https://nvd.nist.gov/vuln/detail/CVE-2020-13692)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-611](https://cwe.mitre.org/data/definitions/611.html\n\n","text":"PostgreSQL JDBC Driver (aka PgJDBC) before 42.2.13 allows XXE."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-611"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-31197","shortDescription":{"text":"[D] Dependency: PostgreSQL JDBC Driver (pgjdbc) 9.2-1004-jdbc4 (CVE-2022-31197)"},"fullDescription":{"text":"PostgreSQL JDBC Driver (PgJDBC for short) allows Java programs to connect to a PostgreSQL database using standard, database independent Java code. The PGJDBC implementation of the `java.sql.ResultRow.refreshRow()` method is not performing escaping of column names so a malicious column name that contains a statement terminator, e.g. `;`, could lead to SQL injection. This could lead to executing additional SQL commands as the application's JDBC user. User applications that do not invoke the `ResultSet.refreshRow()` method are not impacted. User application that do invoke that method are impacted if the underlying database that they are querying via their JDBC application may be under the control of an attacker. The attack requires the attacker to trick the user into executing SQL against a table name who's column names would contain the malicious SQL and subsequently invoke the `refreshRow()` method on the ResultSet. Note that the application's JDBC user and the schema owner need not be the same. A JDBC application that executes as a privileged user querying database schemas owned by potentially malicious less-privileged users would be vulnerable. In that situation it may be possible for the malicious user to craft a schema that causes the application to execute commands as the privileged user. Patched versions will be released as `42.2.26` and `42.4.1`. Users are advised to upgrade. There are no known workarounds for this issue."},"help":{"markdown":"# CVE-2022-31197\n## Upgrade Guidance\n\n**Short Term** - 9.4-1206-jdbc42\n\n**Long Term** - 42.6.0\n\n## Description\nPostgreSQL JDBC Driver (PgJDBC for short) allows Java programs to connect to a PostgreSQL database using standard, database independent Java code. The PGJDBC implementation of the `java.sql.ResultRow.refreshRow()` method is not performing escaping of column names so a malicious column name that contains a statement terminator, e.g. `;`, could lead to SQL injection. This could lead to executing additional SQL commands as the application's JDBC user. User applications that do not invoke the `ResultSet.refreshRow()` method are not impacted. User application that do invoke that method are impacted if the underlying database that they are querying via their JDBC application may be under the control of an attacker. The attack requires the attacker to trick the user into executing SQL against a table name who's column names would contain the malicious SQL and subsequently invoke the `refreshRow()` method on the ResultSet. Note that the application's JDBC user and the schema owner need not be the same. A JDBC application that executes as a privileged user querying database schemas owned by potentially malicious less-privileged users would be vulnerable. In that situation it may be possible for the malicious user to craft a schema that causes the application to execute commands as the privileged user. Patched versions will be released as `42.2.26` and `42.4.1`. Users are advised to upgrade. There are no known workarounds for this issue.\n\n## CVE/BDSA info\n\n\n### BDSA: [H] [CVE-2022-31197](https://nvd.nist.gov/vuln/detail/CVE-2022-31197)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html\n\n","text":"PostgreSQL JDBC Driver (PgJDBC for short) allows Java programs to connect to a PostgreSQL database using standard, database independent Java code. The PGJDBC implementation of the `java.sql.ResultRow.refreshRow()` method is not performing escaping of column names so a malicious column name that contains a statement terminator, e.g. `;`, could lead to SQL injection. This could lead to executing additional SQL commands as the application's JDBC user. User applications that do not invoke the `ResultSet.refreshRow()` method are not impacted. User application that do invoke that method are impacted if the underlying database that they are querying via their JDBC application may be under the control of an attacker. The attack requires the attacker to trick the user into executing SQL against a table name who's column names would contain the malicious SQL and subsequently invoke the `refreshRow()` method on the ResultSet. Note that the application's JDBC user and the schema owner need not be the same. A JDBC application that executes as a privileged user querying database schemas owned by potentially malicious less-privileged users would be vulnerable. In that situation it may be possible for the malicious user to craft a schema that causes the application to execute commands as the privileged user. Patched versions will be released as `42.2.26` and `42.4.1`. Users are advised to upgrade. There are no known workarounds for this issue."},"properties":{"security-severity":"8.9","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/cwe-89"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-0922","shortDescription":{"text":"[T] Dependency: Apache Commons IO 2.2 thru   (BDSA-2021-0922)"},"fullDescription":{"text":"Apache Commons IO contains a path traversal vulnerability. Successfully exploiting this could allow an attacker access to files they do not have permission to view."},"help":{"markdown":"# BDSA-2021-0922\n## Upgrade Guidance\n\n**Short Term** - \n\n**Long Term** - \n\n## Description\nApache Commons IO contains a path traversal vulnerability. Successfully exploiting this could allow an attacker access to files they do not have permission to view.\n\n## CVE/BDSA info\n\n\n### BDSA: [M] [BDSA-2021-0922](https://nvd.nist.gov/vuln/detail/BDSA-2021-0922)\n\n\n\n## Reference\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html\n\n","text":"Apache Commons IO contains a path traversal vulnerability. Successfully exploiting this could allow an attacker access to files they do not have permission to view."},"properties":{"security-severity":"6.8","tags":["security","patch_available","open_source_analysis","transitive_dependency","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-41853","shortDescription":{"text":"[D] Dependency: HyperSQL Database Engine 2.3.4 (CVE-2022-41853)"},"fullDescription":{"text":"Those using java.sql.Statement or java.sql.PreparedStatement in hsqldb (HyperSQL DataBase) to process untrusted input may be vulnerable to a remote code execution attack. By default it is allowed to call any static method of any Java class in the classpath resulting in code execution. The issue can be prevented by updating to 2.7.1 or by setting the system property \"hsqldb.method_class_names\" to classes which are allowed to be called. For example, System.setProperty(\"hsqldb.method_class_names\", \"abc\") or Java argument -Dhsqldb.method_class_names=\"abc\" can be used. From version 2.7.1 all classes by default are not accessible except those in java.lang.Math and need to be manually enabled."},"help":{"markdown":"# CVE-2022-41853\n## Upgrade Guidance\n\n**Short Term** - 2.7.1\n\n**Long Term** - 2.7.1\n\n## Description\nThose using java.sql.Statement or java.sql.PreparedStatement in hsqldb (HyperSQL DataBase) to process untrusted input may be vulnerable to a remote code execution attack. By default it is allowed to call any static method of any Java class in the classpath resulting in code execution. The issue can be prevented by updating to 2.7.1 or by setting the system property \"hsqldb.method_class_names\" to classes which are allowed to be called. For example, System.setProperty(\"hsqldb.method_class_names\", \"abc\") or Java argument -Dhsqldb.method_class_names=\"abc\" can be used. From version 2.7.1 all classes by default are not accessible except those in java.lang.Math and need to be manually enabled.\n\n## CVE/BDSA info\n\n\n### BDSA: [C] [CVE-2022-41853](https://nvd.nist.gov/vuln/detail/CVE-2022-41853)\n\n\n\n## Reference\n\n","text":"Those using java.sql.Statement or java.sql.PreparedStatement in hsqldb (HyperSQL DataBase) to process untrusted input may be vulnerable to a remote code execution attack. By default it is allowed to call any static method of any Java class in the classpath resulting in code execution. The issue can be prevented by updating to 2.7.1 or by setting the system property \"hsqldb.method_class_names\" to classes which are allowed to be called. For example, System.setProperty(\"hsqldb.method_class_names\", \"abc\") or Java argument -Dhsqldb.method_class_names=\"abc\" can be used. From version 2.7.1 all classes by default are not accessible except those in java.lang.Math and need to be manually enabled."},"properties":{"security-severity":"9.1","tags":["security","patch_available","open_source_analysis","direct_dependency","external/cwe/"]},"defaultConfiguration":{"level":"error"}},{"id":"sigma.container_requesting_net_raw:docker_compose|text","shortDescription":{"text":"Improper Privilege Management"},"fullDescription":{"text":"The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."},"help":{"markdown":"## Description\n\t\tThe Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tPotential mitigations include the following:\n  1. Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n  2. Follow the principle of least privilege when assigning access rights to entities in a software system.\n  3. Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.","text":"The Docker container requests the `NET_RAW` capability, either explicitly or by default, granting access to the host's network interfaces."},"properties":{"security-severity":"8.9","tags":["security","static_analysis","external/cwe/cwe-269"]},"defaultConfiguration":{"level":"error"}},{"id":"sigma.missing_samesite_attribute_session_cookie:express|javascript","shortDescription":{"text":"Sensitive Cookie with Improper SameSite Attribute"},"fullDescription":{"text":"The `cookie.sameSite` option is either undefined or set to the insecure value `'none'` or `false`. In all three cases, the cookie's `SameSite` attribute protections are disabled, allowing the browser to send cookies in cross-site requests. An attacker can abuse this missing protection to facilitate cross-site request forgery (CSRF) attacks."},"help":{"markdown":"## Description\n\t\tThe `cookie.sameSite` option is either undefined or set to the insecure value `'none'` or `false`. In all three cases, the cookie's `SameSite` attribute protections are disabled, allowing the browser to send cookies in cross-site requests. An attacker can abuse this missing protection to facilitate cross-site request forgery (CSRF) attacks.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tThe server should explicitly set the SameSite attribute for all cookies containing sensitive data, such as session tokens. This can be accomplished either programmatically when setting Set-Cookie headers in responses or via deployment descriptors provided by various frameworks.\n\nThe setting \"SameSite=Strict\" provides the strongest protection against CSRF but the user experience works best when an application uses two different cookies, one for write-access that is locked down with \"SameSite=Strict\" and another for read-access that can have a more permissive setting, e.g., \"SameSite=Lax\". If the application only relies on one cookie for both read \u0026 write access, then the setting \"SameSite=Lax\" provides some protection against CSRF without too much negative impact on user experience. \n\nIt's worth noting that the definition of same-site is less restrictive than the definition of cross-origin, e.g., requests from other sub-domains are considered same-site although they are from a different origin. This means that even in browsers that fully support the \"SameSite\" cookie attribute, an attacker may still circumvent this protection if they can take over a subdomain or inject HTML or JavaScript into any subdomain of the same site. Therefore, relying on the \"SameSite\" attribute is not recommended as the sole defense against cross-site request forgery, it should instead be seen as a defense in depth mechanism that reduces the likelihood of CSRF.","text":"The `cookie.sameSite` option is either undefined or set to the insecure value `'none'` or `false`. In all three cases, the cookie's `SameSite` attribute protections are disabled, allowing the browser to send cookies in cross-site requests. An attacker can abuse this missing protection to facilitate cross-site request forgery (CSRF) attacks."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-1275"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.missing_iframe_sandbox:html|html","shortDescription":{"text":"Inclusion of Functionality from Untrusted Control Sphere"},"fullDescription":{"text":"The `sandbox` attribute of an `iframe` is not set in HTML. This iframe loads content from a third-party site. If the JavaScript in that iframe is malicious or was compromised, an attacker can break out of the iframe, access the DOM of the main page, and mount a clickjacking or a phishing attack."},"help":{"markdown":"## Description\n\t\tThe `sandbox` attribute of an `iframe` is not set in HTML. This iframe loads content from a third-party site. If the JavaScript in that iframe is malicious or was compromised, an attacker can break out of the iframe, access the DOM of the main page, and mount a clickjacking or a phishing attack.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tPotential mitigations include the following:\n  1. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n  2. When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\n  3. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n  4. Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n\n  5. Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n  6. Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\n  7. Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\n\nThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.\n\n  8. Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\n\nMany file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.\n\n  9. Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.","text":"The `sandbox` attribute of an `iframe` is not set in HTML. This iframe loads content from a third-party site. If the JavaScript in that iframe is malicious or was compromised, an attacker can break out of the iframe, access the DOM of the main page, and mount a clickjacking or a phishing attack."},"properties":{"security-severity":"6.8","tags":["security","static_analysis","external/cwe/cwe-829"]},"defaultConfiguration":{"level":"warning"}},{"id":"sigma.reverse_tabnabbing:html|html","shortDescription":{"text":"Insecure Link Target"},"fullDescription":{"text":"The application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack."},"help":{"markdown":"## Description\n\t\tThe application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tTo prevent untrusted pages linked from the application from being able to manipulate the \"window.opener\" object, set the attribute rel=\"noopener noreferrer\" for each HTML link to external sites. In addition to preventing reverse tabnabbing attacks, it may also improve browser performance as the new page can be run in a separate process.\n\nWhen the rel attribute is set to \"noopener\", the \"window.opener\" object is \"null\" on the new page. Therefore, the attacker cannot manipulate the navigation of the original page.  Additionally, the \"noreferrer\" attribute tells the browser to not include referrer information when the new page is requested.\n\nFor links opened with JavaScript, add the values \"noopener\", \"noreferrer\" as the \"windowFeatures\" parameter in the \"window.open()\" function:\n```\nvar childWindow = window.open(url, name, \"noopener,noreferrer\");   \n```\nFor legacy browser support, you can also manually set the opener to \"null\":\n```\nchildWindow.opener = null;  \n```\n\n**Note**: The rel=\"noopener\" attribute setting is supported by most modern browsers such as Firefox, Chrome, Edge and Safari but is not supported by legacy browsers such as Internet Explorer. For the latest information on browser support, refer to https://caniuse.com/#search=rel.","text":"The application uses an anchor tag whose `target` attribute is set to `_blank`, but the `rel` attribute is not set with the `noopener` value. The page opened from that target link may have the access to the `location` object of the original page through `window.opener.location`. A malicious page associated with this link will be able to navigate the original page to an arbitrary site, such as a phishing site, and thus, execute a reverse tabnabbing attack.\nNote that most contemporary browsers add the `noopener` value to the `rel` automatically by default. Thus, only users with older versions of browsers are targets for this phishing attack."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-1022"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.unsafe_eval:core_javascript|javascript","shortDescription":{"text":"Use of Potentially Dangerous Function"},"fullDescription":{"text":"The application uses an unsafe evaluation method. If attacker-controlled code reaches this method, it may lead to remote code execution, code injection, or a cross-site scripting vulnerability."},"help":{"markdown":"## Description\n\t\tThe application uses an unsafe evaluation method. If attacker-controlled code reaches this method, it may lead to remote code execution, code injection, or a cross-site scripting vulnerability.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tPotential mitigations include the following:\n  1. Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the \"banned.h\" include file from Microsoft's SDL. [REF-554] [REF-7]","text":"The application uses an unsafe evaluation method. If attacker-controlled code reaches this method, it may lead to remote code execution, code injection, or a cross-site scripting vulnerability."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-676"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.missing_secure_attribute_session_cookie:express|javascript","shortDescription":{"text":"Secure Cookie Attribute Not Set"},"fullDescription":{"text":"The configuration of the `client-sessions`, `cookie-session` or `express-session` library does not set the `secure` attribute of the session cookie. While web browsers send cookies with the `secure` attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim."},"help":{"markdown":"## Description\n\t\tThe configuration of the `client-sessions`, `cookie-session` or `express-session` library does not set the `secure` attribute of the session cookie. While web browsers send cookies with the `secure` attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tSet the 'Secure' attribute should on all cookies that contain sensitive data, especially those containing session IDs. The mitigation details depend on the application server, with some requiring programmatic configuration, where others can be configured through an administration interface. \n\nIf not already done, consider deploying HTTP Strict Transport Security (HSTS) headers to minimize the risk of plain-text HTTP requests to the application server.","text":"The configuration of the `client-sessions`, `cookie-session` or `express-session` library does not set the `secure` attribute of the session cookie. While web browsers send cookies with the `secure` attribute only over HTTPS, they do send cookies without it over HTTP. If an attacker can fool the victim's browser into sending an HTTP request to the vulnerable site (for example, with JavaScript code on a malicious page or with a phishing link), the victim's browser will send the vulnerable cookie in clear text. If the attacker can also intercept this network traffic, then they can steal the victim's session cookie and impersonate the victim."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-614"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.unspecified_software_version:docker_compose|text","shortDescription":{"text":"Inclusion of Functionality from Untrusted Control Sphere"},"fullDescription":{"text":"The Docker Compose file does not explicitly set `image` attribute with a specific stable version. Pinning the version of the base image will make the container being built more predictable. Relying on the latest version may silently inherit newer packages, which in the best case may affect application reliability and in the worst case may introduce vulnerabilities."},"help":{"markdown":"## Description\n\t\tThe Docker Compose file does not explicitly set `image` attribute with a specific stable version. Pinning the version of the base image will make the container being built more predictable. Relying on the latest version may silently inherit newer packages, which in the best case may affect application reliability and in the worst case may introduce vulnerabilities.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tPotential mitigations include the following:\n  1. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n  2. When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\n  3. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n  4. Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n\n  5. Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n  6. Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\n  7. Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\n\nThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.\n\n  8. Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\n\nMany file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.\n\n  9. Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.","text":"The Docker Compose file does not explicitly set `image` attribute with a specific stable version. Pinning the version of the base image will make the container being built more predictable. Relying on the latest version may silently inherit newer packages, which in the best case may affect application reliability and in the worst case may introduce vulnerabilities."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-829"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.hardcoded_secret:pattern|text","shortDescription":{"text":"Use of Hard-coded Credentials"},"fullDescription":{"text":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"help":{"markdown":"## Description\n\t\tA secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tPotential mitigations include the following:\n  1. For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\n  2. For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n  3. If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n  4. For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\n  5. For front-end to back-end connections: Three solutions are possible, although none are complete.\n\n    * The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n    * Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n    * Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.","text":"A secret, such as a password, cryptographic key, or token is stored in plaintext directly in the source code, in an application's properties, or configuration file. Users with access to the secret may then use the secret to access resources that they otherwise would not have access to."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-798"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.verbose_server_banner:express|javascript","shortDescription":{"text":"Insertion of Sensitive Information Into Sent Data"},"fullDescription":{"text":"HTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits."},"help":{"markdown":"## Description\n\t\tHTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tPotential mitigations include the following:\n  1. Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.\n  2. Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\n  3. Setup default error messages so that unexpected errors do not disclose sensitive information.\n  4. Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\n\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","text":"HTTP responses contain an `X-Powered-By` header that reveals information about the server which helps attackers exploit known vulnerabilities or craft more targeted exploits."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-201"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.unsafe_session_storage:express_session|javascript","shortDescription":{"text":"Insecure Storage of Sensitive Information"},"fullDescription":{"text":"The session storage that the `express-session` module provides explicitly or by default is insecure. This type of memory storage leaks memory under most conditions. An attacker may create numerous active sessions and cause a Denial-of-Service situation."},"help":{"markdown":"## Description\n\t\tThe session storage that the `express-session` module provides explicitly or by default is insecure. This type of memory storage leaks memory under most conditions. An attacker may create numerous active sessions and cause a Denial-of-Service situation.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tUnspecified remediation.","text":"The session storage that the `express-session` module provides explicitly or by default is insecure. This type of memory storage leaks memory under most conditions. An attacker may create numerous active sessions and cause a Denial-of-Service situation."},"properties":{"security-severity":"6.8","tags":["security","static_analysis","external/cwe/cwe-922"]},"defaultConfiguration":{"level":"warning"}},{"id":"sigma.missing_tls:node_http_server|javascript","shortDescription":{"text":"Cleartext Transmission of Sensitive Information"},"fullDescription":{"text":"A web server is created using the insecure `HTTP` scheme. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers."},"help":{"markdown":"## Description\n\t\tA web server is created using the insecure `HTTP` scheme. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tPotential mitigations include the following:\n  1. Encrypt the data with a reliable encryption scheme before transmitting.\n  2. When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.\n  3. Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.\n  4. Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.","text":"A web server is created using the insecure `HTTP` scheme. As a result, application data is transmitted over an insecure channel where it can be read and modified by attackers."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-319"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.container_privilege_escalation_allowed:docker_compose|text","shortDescription":{"text":"Improper Privilege Management"},"fullDescription":{"text":"The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."},"help":{"markdown":"## Description\n\t\tThe Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tPotential mitigations include the following:\n  1. Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n  2. Follow the principle of least privilege when assigning access rights to entities in a software system.\n  3. Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.","text":"The Docker Compose file sets the `no-new-privileges` attribute to `false` or omits it as the default value is `false`. This doesn't restrict the container from acquiring additional privileges via SUID or SGID bits. This allows privilege escalation, meaning a user can set the security context of the container and can perform root-level operations."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-269"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.container_filesystem_write:docker_compose|text","shortDescription":{"text":"Files or Directories Accessible to External Parties"},"fullDescription":{"text":"The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."},"help":{"markdown":"## Description\n\t\tThe docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tUnspecified remediation.","text":"The docker service container is configured to permit writing to the root filesystem. This makes some security attack vectors such as privilege escalation, denial-of-service or authorization bypass possible since the container instance's filesystem can be tampered with."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-552"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.root_path_attribute_cookie:express|javascript","shortDescription":{"text":"Exposure of Resource to Wrong Sphere"},"fullDescription":{"text":"The `client-sessions`, `cookie-session` or `express-session` library sets the `path` attribute on the session cookie to the root or doesn't set `path` attribute (default value is root). If the application is hosted beneath a subdirectory and the cookie is copied to the root, then applications in other subdirectories will have access to this cookie. If any of these applications become compromised, the cookie of the victim site can be stolen from this application."},"help":{"markdown":"## Description\n\t\tThe `client-sessions`, `cookie-session` or `express-session` library sets the `path` attribute on the session cookie to the root or doesn't set `path` attribute (default value is root). If the application is hosted beneath a subdirectory and the cookie is copied to the root, then applications in other subdirectories will have access to this cookie. If any of these applications become compromised, the cookie of the victim site can be stolen from this application.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tUnspecified remediation.","text":"The `client-sessions`, `cookie-session` or `express-session` library sets the `path` attribute on the session cookie to the root or doesn't set `path` attribute (default value is root). If the application is hosted beneath a subdirectory and the cookie is copied to the root, then applications in other subdirectories will have access to this cookie. If any of these applications become compromised, the cookie of the victim site can be stolen from this application."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-668"]},"defaultConfiguration":{"level":"note"}},{"id":"sigma.expression_escaping_disabled:swig|javascript","shortDescription":{"text":"Improper Encoding or Escaping of Output"},"fullDescription":{"text":"Setting the `autoescape` attribute to `false` disables the escaping mechanism of the Swig template engine. This may lead to XSS attack if untrusted data is not properly validated and escaped."},"help":{"markdown":"## Description\n\t\tSetting the `autoescape` attribute to `false` disables the escaping mechanism of the Swig template engine. This may lead to XSS attack if untrusted data is not properly validated and escaped.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tPotential mitigations include the following:\n  1. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nFor example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.\n\nAlternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability.\n\n  2. If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\nFor example, stored procedures can enforce database query structure and reduce the likelihood of SQL injection.\n\n  3. Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\n  4. In some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict allowlist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input.\n  5. Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20).\n  6. Fully specify which encodings are required by components that will be communicating with each other.\n  7. When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.","text":"Setting the `autoescape` attribute to `false` disables the escaping mechanism of the Swig template engine. This may lead to XSS attack if untrusted data is not properly validated and escaped."},"properties":{"security-severity":"6.8","tags":["security","static_analysis","external/cwe/cwe-116"]},"defaultConfiguration":{"level":"warning"}},{"id":"sigma.least_privilege_violation:docker_compose|text","shortDescription":{"text":"Improper Access Control"},"fullDescription":{"text":"The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."},"help":{"markdown":"## Description\n\t\tThe Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle.\n\t\t## Local Effect\n\t\t\n\t\t\n\t\t## Remediation\n\t\tPotential mitigations include the following:\n  1. Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n  2. Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\n\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.","text":"The Docker container is not configured to drop all default capabilities and then add only required one. Thus the container may be granted excessive privileges which violate the least privilege principle."},"properties":{"security-severity":"3.8","tags":["security","static_analysis","external/cwe/cwe-284"]},"defaultConfiguration":{"level":"note"}},{"id":"deadcode:logical_contradiction|javascript","shortDescription":{"text":"Unreachable, Unused or Dead Code"},"fullDescription":{"text":"Code can never be reached because of a logical contradiction"},"help":{"markdown":"## Description\n\t\tCode can never be reached because of a logical contradiction\n\t\t## Local Effect\n\t\tThe indicated dead code may have performed some action; that action will never occur.\n\t\t\n\t\t## Remediation\n\t\tUnreachable and dead code should be analyzed and either removed or corrected depending on whether it is needed. If the code should execute but doesn't, any bugs preventing the code from executing must be fixed. If the code is not needed, and its removal will not have a negative impact on the application, it should be removed.","text":"Code can never be reached because of a logical contradiction"},"properties":{"security-severity":"6.8","tags":["security","static_analysis","external/cwe/cwe-561"]},"defaultConfiguration":{"level":"warning"}}]}},"results":[{"message":{"text":"Apache Log4j is vulnerable to remote code execution (RCE).  This allows a remote attacker to send a crafted serialized payload that, when processed by Log4j, will execute arbitrary code. This can occur if Log4j is deserializing untrusted network traffic."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":13}}}],"ruleId":"BDSA-2019-4008","partialFingerprints":{"primaryLocationLineHash":"0d4b882ad6f5ec5c43a85777d6860942eccd61b6bc73980f676615281e6a742c"}},{"message":{"text":"Apache Log4j is vulnerable to man-in-the-middle (MITM) attacks due to improper SSL certificate validation due to host name mismatch. An attacker could exploit this by mounting a man-in-the-middle attack which could leak log messages sent through SMTPS."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":13}}}],"ruleId":"BDSA-2020-1398","partialFingerprints":{"primaryLocationLineHash":"0d4b882ad6f5ec5c43a85777d6860942eccd61b6bc73980f676615281e6a742c"}},{"message":{"text":"Log4j **1.x** versions are vulnerable to deserializing untrusted data if configured to use `JMSAppender` (which is not the default). A remote attacker could leverage this to execute arbitrary code on the underlying system with the privileges of the application that is running Log4j.\n\n**Note** that Log4j **1.x** has been marked EOL for many years and has not received updates in this time."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":13}}}],"ruleId":"BDSA-2021-3764","partialFingerprints":{"primaryLocationLineHash":"0d4b882ad6f5ec5c43a85777d6860942eccd61b6bc73980f676615281e6a742c"}},{"message":{"text":"Apache chainsaw is vulnerable to a deserialization of untrusted data flaw. A remote attacker could leverage this to cause remote code execution (RCE)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":13}}}],"ruleId":"BDSA-2021-4371","partialFingerprints":{"primaryLocationLineHash":"0d4b882ad6f5ec5c43a85777d6860942eccd61b6bc73980f676615281e6a742c"}},{"message":{"text":"Log4j is vulnerable to remote code execution (RCE) due to the deserialization of untrusted data. An attacker that is able to make the JMSSink component submit requests to a given LDAP server could load malicious Java classes into the vulnerable application's memory by leveraging the JNDI class-loading capability.\n\nIn order to exploit this vulnerability, the attacker must be able to control the configuration of Log4j, or must have access to an LDAP server which the JMSSink component is configured to use. Log4j must also be configured to utilize JMSSink, which is not used by default."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":13}}}],"ruleId":"BDSA-2022-0117","partialFingerprints":{"primaryLocationLineHash":"0d4b882ad6f5ec5c43a85777d6860942eccd61b6bc73980f676615281e6a742c"}},{"message":{"text":"Apache Log4j is vulnerable to a remote code execution (RCE) issue due to how the Apache Chainsaw component can unsafely deserialize user controlled input.\n\nAn attacker could send crafted input to the application in order to abuse the flaw and execute malicious code on the system.\n\n**Note**: The Apache Chainsaw deserialization vulnerability has been reported as **CVE-2020-9493** and affects EOL Apache Log4j **1.2.x** versions that include this component."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":13}}}],"ruleId":"BDSA-2022-0118","partialFingerprints":{"primaryLocationLineHash":"0d4b882ad6f5ec5c43a85777d6860942eccd61b6bc73980f676615281e6a742c"}},{"message":{"text":"Apache Log4j **1.2.x** versions are vulnerable to SQL injection (SQLi). This may allow an attacker to insert SQL queries into messages being logged that will get executed against a backend database. \n\n**Note:** This issue  affects versions **1.2.x** that are configured to use the `JDBCAppender`. The vendor states that Log4j 1 is no longer maintained and this issue will not be fixed."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":13}}}],"ruleId":"BDSA-2022-0119","partialFingerprints":{"primaryLocationLineHash":"0d4b882ad6f5ec5c43a85777d6860942eccd61b6bc73980f676615281e6a742c"}},{"message":{"text":"** UNSUPPORTED WHEN ASSIGNED **\n\nWhen using the Chainsaw or SocketAppender components with Log4j 1.x on JRE less than 1.7, an attacker that manages to cause a logging entry involving a specially-crafted (ie, deeply nested) \nhashmap or hashtable (depending on which logging component is in use) to be processed could exhaust the available memory in the virtual machine and achieve Denial of Service when the object is deserialized.\n\nThis issue affects Apache Log4j before 2. Affected users are recommended to update to Log4j 2.x.\n\nNOTE: This vulnerability only affects products that are no longer supported by the maintainer.\n\n\n\n\n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":13}}}],"ruleId":"CVE-2023-26464","partialFingerprints":{"primaryLocationLineHash":"0d4b882ad6f5ec5c43a85777d6860942eccd61b6bc73980f676615281e6a742c"}},{"message":{"text":"Spring Framework is vulnerable to path traversal. Paths provided to the `Resourceservlet` were not properly sanitized and as a result exposed to directory traversal attacks. `ResourceServlet` is now deprecated and `ResourceHttpRequestHandler` (and related classes) have superseded it."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2016-0002","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"The Spring Framework contains a flaw when handling URL pattern mappings. The component fails to maintain the intended authorization for mapping requests to controllers. This could allow a remote attacker to bypass authentication and read protected files."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2016-1577","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Pivotal's Spring Framework contains an unsafe Java deserialization vulnerability. If the Spring Framework library's `HttpInvokerServiceExporter` is being used to deserialize client data, it may be possible for a remote attacker to perform remote code execution (RCE) on systems using Spring Framework.\n\n**Note:** All versions prior to **6.0.0-M1** (Which is a pre-release) contain the functionality that may lead to deserialization attacks depending on how the library is implemented in the product."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2016-1700","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Spring Framework is vulnerable to remote code execution (RCE) due to lack of proper validation of user-supplied input. Potential attackers can leverage this flaw to run arbitrary code on the target system by sending crafted messages."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2018-0994","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Spring Framework is vulnerable to directory traversal due to the way static content can be loaded. Potential attackers could leverage this flaw to gain unauthorized access to sensitive files on Windows hosts."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2018-1013","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to insufficient validation of user-supplied input. Crafted input from a remote client can be used to exploit a flaw in the way that servers running the affected software communicate with each other. This is because communication between the servers uses that user-supplied input for building requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2018-1016","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Spring Framework is vulnerable to remote code execution (RCE) due to lack of proper validation of user-supplied input. Potential attackers can leverage this flaw to run arbitrary code on the target system by sending crafted messages. Original remediation was not implemented correctly for the 4.3.x branch."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2018-1042","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Spring Framework has a flaw in the manipulation of regular expressions within the spring-messaging module. An attacker can send a specially crafted message to the simple STOMP broker that will trigger a regular expression denial-of-service (ReDoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2018-1440","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Spring Framework is vulnerable to information exposure due to improper configuration of JSON with Padding (JSONP). This could allow an attacker to obtain potentially sensitive information."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2018-1901","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"A cross-site tracing (*XST*) vulnerability has been discovered in spring framework. The application allows obscure request methods, such as TRACE and TRACK. These HTTP methods can be used with an existing cross-site scripting (*XSS*) vulnerability to escalate to an XST vulnerability. An attacker could exploit this by utilizing an XSS vulnerability to bypass cookie protection and steal sensitive data."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2018-1960","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"An improper input validation vulnerability has been discovered in Spring Framework by Pivotal. A range header input is not being correctly restricted allowing a high value to be accepted by the application. An attacker could exploit this vulnerability to cause a denial-of-service (DoS) condition. \n\nThis vulnerability affects applications that depend on either `spring-webmvc` or `spring-webflux`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2018-3577","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2020-2431","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2021-3236","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2022-0011","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2022-0820","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2022-0847","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2022-0858","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2022-1040","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2023-0638","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"BDSA-2023-0847","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, applications that handle file uploads are vulnerable to DoS attack if they rely on data binding to set a MultipartFile or javax.servlet.Part to a field in a model object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2022-22970","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, application with a STOMP over WebSocket endpoint is vulnerable to a denial of service attack by an authenticated user."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2022-22971","partialFingerprints":{"primaryLocationLineHash":"1e18e20bf489444a8327d6209fb21b8d55278ba492f6e0941b1e4cb4e561b058"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":5}}}],"ruleId":"sigma.container_requesting_net_raw:docker_compose|text","partialFingerprints":{"primaryLocationLineHash":"7d250aa208cc8c5ad84298e4166d659de8d5e7def96db2cda241b607a1ea91a0"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"server.js"},"region":{"startLine":78}}}],"ruleId":"sigma.missing_samesite_attribute_session_cookie:express|javascript","partialFingerprints":{"primaryLocationLineHash":"6aa272f9454562ccfb2c2a97c9297668e67663848b2a7b7ce99c0253dbca5197"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/views/tutorial/a1.html"},"region":{"startLine":79}}}],"ruleId":"sigma.missing_iframe_sandbox:html|html","partialFingerprints":{"primaryLocationLineHash":"d8e5cdcd1b92a519ae3de0fb3380d3dfc2d0d4dec6e16ce858a2073a9fdd047a"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/views/tutorial/a8.html"},"region":{"startLine":59}}}],"ruleId":"sigma.reverse_tabnabbing:html|html","partialFingerprints":{"primaryLocationLineHash":"479f59cdc2242e66e13a6d5c3a57a9b19a6194940defdf1726334a00035d0403"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/views/tutorial/a1.html"},"region":{"startLine":141}}}],"ruleId":"sigma.reverse_tabnabbing:html|html","partialFingerprints":{"primaryLocationLineHash":"b9fe35ec68c8c7f49c5b867d105c74e0338f8806c6b701686563c9261f424d32"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/routes/contributions.js"},"region":{"startLine":33}}}],"ruleId":"sigma.unsafe_eval:core_javascript|javascript","partialFingerprints":{"primaryLocationLineHash":"2997bb21ca90e62a12568941cc17cae3b6452e56da41bb40f71d24026119569d"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"server.js"},"region":{"startLine":78}}}],"ruleId":"sigma.missing_secure_attribute_session_cookie:express|javascript","partialFingerprints":{"primaryLocationLineHash":"cdfbaff0e2ba964888f7494e7f62caf36be183ddca55f5bdb340d9e1d52c4674"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":14}}}],"ruleId":"sigma.unspecified_software_version:docker_compose|text","partialFingerprints":{"primaryLocationLineHash":"c1e8e1b64b0ef9d6b221a7219049fd2440dc14278eb6d7a147ea50199e62a99a"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/views/tutorial/a1.html"},"region":{"startLine":179}}}],"ruleId":"sigma.reverse_tabnabbing:html|html","partialFingerprints":{"primaryLocationLineHash":"4d6151a277dc1c392470d6e6017504c2c475b9a523a7d689069f66b7a1b2d76e"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"test/e2e/fixtures/users/user.json"},"region":{"startLine":3}}}],"ruleId":"sigma.hardcoded_secret:pattern|text","partialFingerprints":{"primaryLocationLineHash":"7e4bb14840119c46cbffdc7ffa59f617137a460b40c8623d0153827cca0ed0bc"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"server.js"},"region":{"startLine":15}}}],"ruleId":"sigma.verbose_server_banner:express|javascript","partialFingerprints":{"primaryLocationLineHash":"3ec9fd6add165e36d1059582f1407a717c5aad6d3dc7c21071ecbe07f2ef91c1"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"test/e2e/fixtures/users/admin.json"},"region":{"startLine":3}}}],"ruleId":"sigma.hardcoded_secret:pattern|text","partialFingerprints":{"primaryLocationLineHash":"5dd1a6c57d3eccfb29f0ab08813ab63a3de028382ebc7fa1b71738d020537070"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"test/e2e/fixtures/users/new_user.json"},"region":{"startLine":5}}}],"ruleId":"sigma.hardcoded_secret:pattern|text","partialFingerprints":{"primaryLocationLineHash":"7fbfaec8bf06be423bf89c0588b094f4e895ab69fc612e9f378794e9fb9b01c9"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"server.js"},"region":{"startLine":78}}}],"ruleId":"sigma.unsafe_session_storage:express_session|javascript","partialFingerprints":{"primaryLocationLineHash":"b52d30500e84e0c8ec6f07c4de26d4498fcd7e72b949c47898fbccf7f16a87fd"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/views/tutorial/ssrf.html"},"region":{"startLine":23}}}],"ruleId":"sigma.missing_iframe_sandbox:html|html","partialFingerprints":{"primaryLocationLineHash":"c7ef643e6fdb129c9386aa8059661106d34cbcb6b221ec6e2ac40948d60146f9"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/views/tutorial/a1.html"},"region":{"startLine":98}}}],"ruleId":"sigma.missing_iframe_sandbox:html|html","partialFingerprints":{"primaryLocationLineHash":"c82731d636bdbf0da583a39c3b984907493d9acddc099402f82e5bb91bbf3f28"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"server.js"},"region":{"startLine":143}}}],"ruleId":"sigma.missing_tls:node_http_server|javascript","partialFingerprints":{"primaryLocationLineHash":"450048da3a0d5dfe5efc06852e2e4d61815e887d5e9d9530db25c8647b5afdf8"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":5}}}],"ruleId":"sigma.container_privilege_escalation_allowed:docker_compose|text","partialFingerprints":{"primaryLocationLineHash":"7ae10adbbfd04af79c773cf37f1c53da1ba69180cf546887cd2f0f572142f57a"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/views/login.html"},"region":{"startLine":46}}}],"ruleId":"sigma.reverse_tabnabbing:html|html","partialFingerprints":{"primaryLocationLineHash":"723666b3e411bdf69b4213b758c670823a11623a2b0db03493039b025f1f93c8"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/views/tutorial/a3.html"},"region":{"startLine":157}}}],"ruleId":"sigma.missing_iframe_sandbox:html|html","partialFingerprints":{"primaryLocationLineHash":"cf9477e04cd0ab05c207a7da42ce13f0be4f42171b382d0983c4addec1c57a5a"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/views/tutorial/a7.html"},"region":{"startLine":30}}}],"ruleId":"sigma.missing_iframe_sandbox:html|html","partialFingerprints":{"primaryLocationLineHash":"ec3919fdf73080e0fc527c1b56b8547162be3f87f594949178a3d4562dfcc527"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/views/tutorial/a10.html"},"region":{"startLine":31}}}],"ruleId":"sigma.missing_iframe_sandbox:html|html","partialFingerprints":{"primaryLocationLineHash":"ff5258aea360b9f1bf57f6a169df0125436a4ec2d568ff8fbb33dc6c788157d1"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":14}}}],"ruleId":"sigma.container_filesystem_write:docker_compose|text","partialFingerprints":{"primaryLocationLineHash":"e3bb85dcb740911eaaee5898a71b7a7e98582d4c47382ff93ee2fad38516d8da"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":14}}}],"ruleId":"sigma.container_requesting_net_raw:docker_compose|text","partialFingerprints":{"primaryLocationLineHash":"8a17cd1aafe0ba42b32c885ad7c109f76a07d75b3cb5ca23d1167aa14f63f062"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"server.js"},"region":{"startLine":78}}}],"ruleId":"sigma.root_path_attribute_cookie:express|javascript","partialFingerprints":{"primaryLocationLineHash":"4d6ce3d483efe0efb4975768b057c67a4f05d2f48d40e19738aac9be56674731"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":14}}}],"ruleId":"sigma.container_privilege_escalation_allowed:docker_compose|text","partialFingerprints":{"primaryLocationLineHash":"4833cdf3eb93cc1e9949b83cdd66f0022a29dd4f12f26047b8bb3cf4af8febe5"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/routes/contributions.js"},"region":{"startLine":34}}}],"ruleId":"sigma.unsafe_eval:core_javascript|javascript","partialFingerprints":{"primaryLocationLineHash":"8909db32824d9278caaad235a16c9e7422c434ea75b6c020f6147a77cab8179a"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"server.js"},"region":{"startLine":135}}}],"ruleId":"sigma.expression_escaping_disabled:swig|javascript","partialFingerprints":{"primaryLocationLineHash":"d000266ee3e036788940a4c8cd5773ccc385fb5c41b99b27807dd5a954cfdfd3"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/views/tutorial/a4.html"},"region":{"startLine":32}}}],"ruleId":"sigma.missing_iframe_sandbox:html|html","partialFingerprints":{"primaryLocationLineHash":"98b32d24dd224126973b9d016295f1a6bc65a947de2dca842dedd14698a8ec0d"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/views/tutorial/a8.html"},"region":{"startLine":42}}}],"ruleId":"sigma.missing_iframe_sandbox:html|html","partialFingerprints":{"primaryLocationLineHash":"3b1df99e57eb0f2f26ec98f3caba5c1bb3fde00b721bdd7533aac1c2ce74cd5d"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/routes/contributions.js"},"region":{"startLine":32}}}],"ruleId":"sigma.unsafe_eval:core_javascript|javascript","partialFingerprints":{"primaryLocationLineHash":"216c8dc3e61b64c180cee54493334c6318b30f8da1f11f7538e6e448c4c84afd"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pim.json"},"region":{"startLine":4}}}],"ruleId":"sigma.hardcoded_secret:pattern|text","partialFingerprints":{"primaryLocationLineHash":"367085f8a995680921b067fd9a5e8e58a3122952eada3e50d02451d27bab9bcc"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":5}}}],"ruleId":"sigma.least_privilege_violation:docker_compose|text","partialFingerprints":{"primaryLocationLineHash":"09d6c3d57a354433b629b3e77c3f04c40443cb0a404b3bd7c97d036315064fa6"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":14}}}],"ruleId":"sigma.least_privilege_violation:docker_compose|text","partialFingerprints":{"primaryLocationLineHash":"4b46792949bad00317c5c964954f226759f96bd2cd384d66456be1f4b3e85a67"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/views/login.html"},"region":{"startLine":159}}}],"ruleId":"deadcode:logical_contradiction|javascript","partialFingerprints":{"primaryLocationLineHash":"0ad9d0e1edefb484a3f67be8be5c3729f7a1bd4caa45025f31895e21d723f164"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"docker-compose.yml"},"region":{"startLine":5}}}],"ruleId":"sigma.container_filesystem_write:docker_compose|text","partialFingerprints":{"primaryLocationLineHash":"26fbd8c0cdc9f00327007aedd73f360b7f2689bd5aaedbdb482e081e12f0d33f"}},{"message":{"text":"This dependency has vulnerabilities. For detailed information regarding the vulnerabilities, take a look at the BDSAs and/or CVEs below. "},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"app/views/tutorial/a5.html"},"region":{"startLine":86}}}],"ruleId":"sigma.missing_iframe_sandbox:html|html","partialFingerprints":{"primaryLocationLineHash":"517862f42f9444510067da51c01c2ff91ae8ed2c10a14b2b8c4a230d6dafa5c6"}}]}],"version":"2.1.0"}